A collection of experimental libraries.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

::
lib/lua_libs/test.lua

a simple test framework intended to be used to write simple unit tests.

-- include the test framework
require 'test'

-- initialize the test framework
test.init()

-- ignored by framework
local function util1()
end

-- ignored by framework
function util2()
end

-- immediately run by framework
function test_TestName()
end

Local functions and functions not beginning with "test_" should be ignored 
by the framework.  Functions beginning with "test_" will be run immediately,
so make sure any functions your test requires on have already been defined.

If an 'assert' or 'error' occurs in the test or any of the code called in 
the test, the test will fail and display the error message from the 'assert'
or 'error' function.  

Currently, there is only an assertThrows helper method that takes a function
and then asserts that the function uses 'error' or 'assert'.  There is
an optional message parameter which will be compared to whatever message
the 'error' or 'assert' is associated with.

::
lib/lua_libs/readonly.lua

I wanted an easy way to create readonly tables.  

require 'readonly'

local roTable = readonly.shallowReadonly{ 1,2,3, a = "a" }

Currently, all metaqualities of the table you pass into shallowReadonly 
are lost.  So #, ==, <, etc will not work on the output even if they did
work on the input.

I implemented an ipairs and pairs method, so you should still be able to 
use the output in a for loop.

for i, v in roTable:ipairs() do
    print( i, v )
end

for k, v in roTable:pairs() do
    print( k, v )
end

Any attempt to assign to an existing or nonexisting index or field of a 
readonly table should cause an error to be thrown.

The current readonly functionality is only shallow.  It will only stop
you from modifying the top level of the output.  If you included sub
tables in the original table, those tables will not be readonly.

::
lib/lua_libs/seq.lua

For transformative code, I do not like using for or while loops.  I have
had great success using linq functions from C# and Data.List functions 
from Haskell.  I wanted to recreate similar functionality for lua.

Do not modify any lists that you pass into the seq library.  Do not
modify any lists that you get out of the seq library.  If you need
to do a modification, please do a deep copy first.  

require 'seq'

local x = seq.toSeq{ 1, 2, 3, 4 }

local y = x.map( function ( v ) return v + 1 end )
local yEval = y.evaluate

local z = y.map( function ( v ) return v + 2 end )
           .where( function( v ) return v % 2 == 2 end )
           .evaluate

-- yEval = { 2, 3, 4, 5 }
-- z = { 4, 6 }


These sequences are not lazy, but they will not evaluate until the evaluate
call is done.  They are also not very efficient as a lot of extra memory 
is allocated.  If you need efficiency, use a loop or recursion.
